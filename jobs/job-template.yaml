- job-template:
    name: '{name}_{env-name}'
    project-type: freestyle
    defaults: global
    description: |- 
            <h6 color="blue">Personal {env-name} Environment</h6>
            <ul>
               <li>Main App Backend</li>
               <li>Main App Frontend</li>
               <li>Trading App Frontend</li>
               <li>Trading App Backend</li>
               <li>Notification App Frontend</li>
               <li>Notification App Backend</li>
            </ul>
    disabled: false
    concurrent: true
    quiet-period: 5
    block-downstream: false
    block-upstream: false
    retry-count: 3
    node: master
    build-discarder:
      daysToKeep: 3
      numToKeep: 3
      artifactDaysToKeep: -1
      artifactNumToKeep: -1

    wrappers:
      - ansicolor:
          colormap: "xterm"

    parameters:
      - active-choices:
          name: XCHANGE_BACKEND_TAG
          description: xchange-app backend docker image tag
          choice-type: single-select
          script:
             groovy: |-
               def RepoName = "xchange"
               def command = "aws ecr describe-images --registry-id 615509580745 --repository-name $RepoName --query reverse(sort_by(imageDetails,&imagePushedAt))[*].imageTags[] --output text"
               def proc = command.execute()
               proc.waitFor()
               def output = proc.in.text
               return output.tokenize()
             use-groovy-sandbox: true
          enable-filters: true
          filter-starts-at: 1

      - active-choices:
          name: XCHANGE_FRONTEND_TAG
          description: xchange-app frontend docker image tag
          choice-type: single-select
          script:
             groovy: |-
               def RepoName = "xchange-frontend"
               def command = "aws ecr describe-images --registry-id 615509580745 --repository-name $RepoName --query reverse(sort_by(imageDetails,&imagePushedAt))[*].imageTags[] --output text"
               def proc = command.execute()
               proc.waitFor()
               def output = proc.in.text
               return output.tokenize()
             use-groovy-sandbox: true
          enable-filters: true
          filter-starts-at: 1

      - active-choices:
          name: TRADING_FRONTEND_TAG
          description: Trading fontend docker image tag
          choice-type: single-select
          script:
             groovy: |-
               def RepoName = "trading-frontend"
               def command = "aws ecr describe-images --registry-id 615509580745 --repository-name $RepoName --query reverse(sort_by(imageDetails,&imagePushedAt))[*].imageTags[] --output text"
               def proc = command.execute()
               proc.waitFor()
               def output = proc.in.text
               return output.tokenize()
             use-groovy-sandbox: true
          enable-filters: true
          filter-starts-at: 1

      - active-choices:
          name: TRADING_BACKEND_TAG
          description: Trading backend docker image tag
          choice-type: single-select
          script:
             groovy: |-
               def RepoName = "xchange-trading"
               def command = "aws ecr describe-images --registry-id 615509580745 --repository-name $RepoName --query reverse(sort_by(imageDetails,&imagePushedAt))[*].imageTags[] --output text"
               def proc = command.execute()
               proc.waitFor()
               def output = proc.in.text
               return output.tokenize()
             use-groovy-sandbox: true
          enable-filters: true
          filter-starts-at: 1

      - active-choices:
          name: NOTIFICATION_FRONTEND_TAG
          description: Notification fontend docker image tag
          choice-type: single-select
          script:
             groovy: |-
               def RepoName = "notification-frontend"
               def command = "aws ecr describe-images --registry-id 615509580745 --repository-name $RepoName --query reverse(sort_by(imageDetails,&imagePushedAt))[*].imageTags[] --output text"
               def proc = command.execute()
               proc.waitFor()
               def output = proc.in.text
               return output.tokenize()
             use-groovy-sandbox: true
          enable-filters: true
          filter-starts-at: 1

      - active-choices:
          name: NOTIFICATION_BACKEND_TAG
          description: Notification backend docker image tag
          choice-type: single-select
          script:
             groovy: |-
               def RepoName = "notification"
               def command = "aws ecr describe-images --registry-id 615509580745 --repository-name $RepoName --query reverse(sort_by(imageDetails,&imagePushedAt))[*].imageTags[] --output text"
               def proc = command.execute()
               proc.waitFor()
               def output = proc.in.text
               return output.tokenize()
             use-groovy-sandbox: true
          enable-filters: true
          filter-starts-at: 1

      - choice: 
          name: ACTIVE_PROFILE
          description: "Current profile"
          choices:
            - docker
            - '{host}'

      - choice: 
          name: DOCKER_STACK_DRY_RUN
          description: ""
          choices:
            - "false"
            - "true"


    scm:
      - mainapp-scm


    builders:
      - ansible-playbook:
          playbook: ansible/deployment/mainapp/site.yml
          inventory:
            path: ansible/deployment/mainapp/hosts
          hosts: '{host}'
          credentials-id: 44885f07-8bc6-400f-b02b-9c41c2cbc59a
          colorized-output: "true"
     
- scm:
    name: mainapp-scm
    scm:
      - git:
         url: git@bitbucket.org:xchangeteam/xchange-devops.git
         branches:
          - origin/DEVOPS-127
         credentials-id: 44885f07-8bc6-400f-b02b-9c41c2cbc59a
         sparse-checkout:
           paths: 
             - ansible/deployment/mainapp
         
#- view:
#    name: DOCKER_LAUNCH_JJB
#    description: 'View for Docker Launch Jobs'
#    view-type: list
#    regex: Launch_Docker_.*

